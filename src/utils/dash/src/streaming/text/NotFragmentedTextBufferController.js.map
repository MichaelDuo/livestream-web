{"version":3,"sources":["../../../../../src/streaming/text/NotFragmentedTextBufferController.js"],"names":["BUFFER_CONTROLLER_TYPE","NotFragmentedTextBufferController","config","context","eventBus","getInstance","textController","errHandler","streamInfo","type","mimeType","fragmentModel","instance","isBufferingCompleted","initialized","mediaSource","buffer","initCache","setup","on","Events","DATA_UPDATE_COMPLETED","onDataUpdateCompleted","INIT_FRAGMENT_LOADED","onInitFragmentLoaded","getBufferControllerType","initialize","source","setMediaSource","createBuffer","mediaInfoArr","mediaInfo","create","textBuffer","getBuffer","hasOwnProperty","Constants","INITIALIZE","e","isText","codec","indexOf","getTextSourceBuffer","error","DashJSError","Errors","MEDIASOURCE_TYPE_UNSUPPORTED_CODE","MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE","message","getType","value","getMediaSource","getIsPruningInProgress","dischargePreBuffer","setSeekStartTime","getBufferLevel","getIsBufferingCompleted","reset","errored","off","abort","sender","getStreamId","id","currentRepresentation","getCurrentRepresentation","chunk","extract","trigger","TIMED_TEXT_REQUESTED","index","streamId","bytes","save","append","STREAM_COMPLETED","request","appendInitSegment","representationId","console","log","getRangeAt","updateTimestampOffset","MSETimeOffset","timestampOffset","isNaN","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"NotFragmentedTextBufferController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport InitCache from '../utils/InitCache';\nimport SourceBufferSink from '../SourceBufferSink';\nimport TextController from '../../streaming/text/TextController';\nimport DashJSError from '../../streaming/vo/DashJSError';\nimport Errors from '../../core/errors/Errors';\n\nconst BUFFER_CONTROLLER_TYPE = 'NotFragmentedTextBufferController';\nfunction NotFragmentedTextBufferController(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const textController = TextController(context).getInstance();\n\n    const errHandler = config.errHandler;\n    const streamInfo = config.streamInfo;\n    const type = config.type;\n    const mimeType = config.mimeType;\n    const fragmentModel = config.fragmentModel;\n\n    let instance,\n        isBufferingCompleted,\n        initialized,\n        mediaSource,\n        buffer,\n        initCache;\n\n    function setup() {\n        initialized = false;\n        mediaSource = null;\n        isBufferingCompleted = false;\n\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n        eventBus.on(Events.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, instance);\n    }\n\n    function getBufferControllerType() {\n        return BUFFER_CONTROLLER_TYPE;\n    }\n\n    function initialize(source) {\n        setMediaSource(source);\n        initCache = InitCache(context).getInstance();\n    }\n\n    function createBuffer(mediaInfoArr) {\n        const mediaInfo = mediaInfoArr[0];\n        try {\n            buffer = SourceBufferSink(context).create(mediaSource, mediaInfo);\n            if (!initialized) {\n                const textBuffer = buffer.getBuffer();\n                if (textBuffer.hasOwnProperty(Constants.INITIALIZE)) {\n                    textBuffer.initialize(mimeType, streamInfo, mediaInfoArr, fragmentModel);\n                }\n                initialized = true;\n            }\n            return buffer;\n        } catch (e) {\n            if (mediaInfo && ((mediaInfo.isText) || (mediaInfo.codec.indexOf('codecs=\"stpp') !== -1) || (mediaInfo.codec.indexOf('codecs=\"wvtt') !== -1))) {\n                try {\n                    buffer = textController.getTextSourceBuffer();\n                } catch (e) {\n                    errHandler.error(new DashJSError(Errors.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, Errors.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type + ' : ' + e.message));\n                }\n            } else {\n                errHandler.error(new DashJSError(Errors.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, Errors.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type));\n            }\n        }\n    }\n\n    function getType() {\n        return type;\n    }\n\n    function getBuffer() {\n        return buffer;\n    }\n\n    function setMediaSource(value) {\n        mediaSource = value;\n    }\n\n    function getMediaSource() {\n        return mediaSource;\n    }\n\n    function getIsPruningInProgress() {\n        return false;\n    }\n\n    function dischargePreBuffer() {\n    }\n\n    function setSeekStartTime() { //Unused - TODO Remove need for stub function\n    }\n\n    function getBufferLevel() {\n        return 0;\n    }\n\n    function getIsBufferingCompleted() {\n        return isBufferingCompleted;\n    }\n\n    function reset(errored) {\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n        eventBus.off(Events.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, instance);\n\n        if (!errored && buffer) {\n            buffer.abort();\n            buffer.reset();\n            buffer = null;\n        }\n    }\n\n    function onDataUpdateCompleted(e) {\n        if (e.sender.getStreamId() !== streamInfo.id || e.sender.getType() !== type || e.error) return;\n\n        const currentRepresentation = e.sender.getCurrentRepresentation();\n\n        const chunk = initCache.extract(streamInfo.id, currentRepresentation ? currentRepresentation.id : null);\n\n        if (!chunk) {\n            eventBus.trigger(Events.TIMED_TEXT_REQUESTED, {\n                index: 0,\n                streamId: streamInfo.id,\n                sender: e.sender\n            }); //TODO make index dynamic if referring to MP?\n        }\n    }\n\n    function onInitFragmentLoaded(e) {\n        if (e.chunk.streamId !== streamInfo.id || e.chunk.mediaInfo.type !== type || (!e.chunk.bytes)) return;\n\n        initCache.save(e.chunk);\n        buffer.append(e.chunk);\n\n        eventBus.trigger(Events.STREAM_COMPLETED, {\n            request: e.request\n        });\n    }\n\n    function appendInitSegment(representationId) {\n        const chunk = initCache.extract(streamInfo.id, representationId);\n\n        if (!chunk) {\n            console.log('trigger TIMED_TEXT_REQUESTED');\n            eventBus.trigger(Events.TIMED_TEXT_REQUESTED, {\n                index: 0,\n                streamId: streamInfo.id,\n                sender: instance\n            });\n        }\n    }\n\n    function getRangeAt() {\n        return null;\n    }\n\n    function updateTimestampOffset(MSETimeOffset) {\n        if (buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)) {\n            buffer.timestampOffset = MSETimeOffset;\n        }\n    }\n\n    instance = {\n        getBufferControllerType: getBufferControllerType,\n        initialize: initialize,\n        createBuffer: createBuffer,\n        getType: getType,\n        setSeekStartTime: setSeekStartTime,\n        getBuffer: getBuffer,\n        getBufferLevel: getBufferLevel,\n        setMediaSource: setMediaSource,\n        getMediaSource: getMediaSource,\n        getIsBufferingCompleted: getIsBufferingCompleted,\n        getIsPruningInProgress: getIsPruningInProgress,\n        dischargePreBuffer: dischargePreBuffer,\n        appendInitSegment: appendInitSegment,\n        getRangeAt: getRangeAt,\n        reset: reset,\n        updateTimestampOffset: updateTimestampOffset\n    };\n\n    setup();\n\n    return instance;\n}\n\nNotFragmentedTextBufferController.__dashjs_factory_name = BUFFER_CONTROLLER_TYPE;\nexport default FactoryMaker.getClassFactory(NotFragmentedTextBufferController);\n"]}